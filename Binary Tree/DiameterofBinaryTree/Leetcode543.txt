/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


 //ðŸ“Œ 1st Approach 
class Solution {
    
    public int Height(TreeNode node)
    {
        if(node==null)
        {
            return -1;
        }
        int lh=Height(node.left);
        int rh=Height(node.right);
        int myH=Math.max(lh,rh)+1;
        return myH;
    }
    
    //Minimum Height is -1 and Minimun diameter is 0 , therefore 
    //base condition mei wahi likha hai 
    public int diameterOfBinaryTree(TreeNode root) 
    {
        if(root==null)
        {
            return 0;
        }
    
        int ld=diameterOfBinaryTree(root.left); //acroos only left side
        int rd=diameterOfBinaryTree(root.right); //across only right side
        
        int lh=Height(root.left);
        int rh=Height(root.right);
        
        int acrossNode =lh+rh+2; //across node 
        
        // since diameter can be pn any side (i.e across node / left/right , so comparing )
        
        int myDia =Math.max(acrossNode,Math.max(ld,rd));
        
        return myDia;
    }
}


//ðŸ“Œ 2nd Approach


   
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    class Pair
    {
        int height;
        int diameter;
        
        Pair()
        {
            
        }
        Pair(int height, int diameter)
        {
            this.height =height;
            this.diameter=diameter;
        }
            
    }
    
    public Pair diameter(TreeNode node)
    {
        if(node==null)
        {
            return new Pair(-1,0);
        }
        
        Pair leftans =diameter(node.left);
        Pair rightans =diameter(node.right);
        
        Pair mypair=new Pair();
        
        mypair.height=Math.max(leftans.height,rightans.height)+1;
        int acrossNode =leftans.height+rightans.height+2;
         mypair.diameter=Math.max(acrossNode,Math.max(leftans.diameter,rightans.diameter));
        
        return mypair;
    }
    
    
    public int diameterOfBinaryTree(TreeNode root) 
    {
        Pair ans =diameter(root);
        return ans.diameter;
        
        
    }
}




//ðŸ“Œ 3rd Approach 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
//     class Pair
//     {
//         int height;
//         int diameter;
        
//         Pair()
//         {
            
//         }
//         Pair(int height, int diameter)
//         {
//             this.height =height;
//             this.diameter=diameter;
//         }
            
//     }
    
    public int[] diameter(TreeNode node)
    {
        if(node==null)
        {
            return new int[]{-1,0};
        }
            
        //0th position is -height 
        //1st position is diameter
        int[] leftans =diameter(node.left);
        int[] rightans =diameter(node.right);
        
        int []mypair =new int[2];
        
        
        mypair[0]=Math.max(leftans[0],rightans[0])+1;
        int acrossNode =leftans[0]+rightans[0]+2;
         mypair[1]=Math.max(acrossNode,Math.max(leftans[1],rightans[1]));
        
        return mypair;
    }
    
    
    public int diameterOfBinaryTree(TreeNode root) 
    {
        int []ans =diameter(root);
        return ans[1];
        
    }
}


//ðŸ“Œ 4th Approach 




